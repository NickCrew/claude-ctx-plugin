"""Core module for claude-ctx - refactored into domain-specific submodules.

This __init__.py provides backward compatibility by re-exporting all functions
from the submodules, allowing existing code to continue using:
    from claude_ctx_py.core import function_name

The module is now organized as:
- base.py: Utility functions and constants
- agents.py: Agent management
- skills.py: Skill management
- modes.py: Mode management
- rules.py: Rule management
- workflows.py: Workflow management
- scenarios.py: Scenario management
- profiles.py: Profile and initialization functions
"""

# Export all constants
from .base import (
    BLUE,
    GREEN,
    YELLOW,
    RED,
    NC,
    yaml,
    FrontMatterToken,
)

# Export all functions from base
from .base import (
    _color,
    _resolve_claude_dir,
    _resolve_init_dirs,
    _init_slug_for_path,
    _strip_ansi_codes,
    _run_detection_command,
    _run_detect_project_type,
    _run_analyze_project,
    _is_disabled,
    _iter_md_files,
    _iter_all_files,
    _parse_active_entries,
    _update_with_backup,
    _uncomment_rule_line,
    _comment_rule_line,
    _remove_exact_entries,
    _extract_front_matter,
    _tokenize_front_matter,
    _strip_inline_comment,
    _clean_scalar,
    _parse_inline_list,
    _find_key,
    _locate_path,
    _collect_list_items,
    _extract_values_for_path,
    _extract_values_from_paths,
    _extract_scalar_from_paths,
    _backup_config,
    _render_section,
    _refresh_claude_md,
    _load_yaml,
    _load_yaml_dict,
    _flatten_mixed,
    _ensure_list,
    _now_iso,
    _load_detection_file,
    _resolve_init_target,
    _prompt_user,
    _confirm,
    _format_detection_summary,
    _format_header,
    _parse_selection,
    _append_session_log,
    _list_available_agents,
    _list_available_modes,
)

# Export all functions from agents
from .agents import (
    AgentGraphNode,
    _agent_basename,
    _normalize_agent_filename,
    _find_disabled_agent_file,
    _find_agent_file_any_state,
    _normalize_dependency_name,
    _parse_agent_dependencies,
    _read_agent_front_matter_lines,
    _parse_agent_metadata_name,
    _parse_dependencies_from_front,
    _display_agent_name,
    _extract_agent_name,
    _generate_dependency_map,
    _active_agent_files,
    _find_agent_dependents,
    build_agent_graph,
    _format_dependency_entries,
    render_agent_graph,
    export_agent_graph,
    agent_graph,
    _iter_agent_paths,
    _resolve_agent_validation_target,
    _load_agent_schema,
    agent_validate,
    _agent_activate_recursive,
    agent_activate,
    agent_deactivate,
    list_agents,
    agent_status,
    agent_deps,
)

# Export all functions from skills
from .skills import (
    list_skills,
    skill_info,
    skill_versions,
    skill_validate,
    skill_analyze,
    skill_deps,
    skill_agents,
    skill_suggest,
    skill_metrics,
    skill_metrics_reset,
    skill_analytics,
    skill_report,
    skill_trending,
    skill_compose,
    skill_community_list,
    skill_community_install,
    skill_community_validate,
    skill_community_rate,
    skill_community_search,
)

# Export all functions from modes
from .modes import (
    _mode_active_file,
    _mode_inactive_dir,
    mode_activate,
    mode_deactivate,
    list_modes,
    mode_status,
)

# Export all functions from rules
from .rules import (
    rules_status,
    rules_activate,
    rules_deactivate,
    list_rules,
)

# Export all functions from workflows
from .workflows import (
    workflow_run,
    workflow_list,
    workflow_status,
    workflow_resume,
)

# Export all functions from scenarios
from .scenarios import (
    ScenarioMetadata,
    _scenario_dirs,
    _ensure_scenarios_dir,
    _scenario_schema_path,
    _scenario_lock_basename,
    _scenario_init_state,
    _scenario_update_phase_state,
    _scenario_finalize_state,
    _collect_scenario_targets,
    _parse_scenario_metadata,
    scenario_list,
    scenario_validate,
    scenario_status,
    scenario_stop,
    scenario_run,
    scenario_preview,
)

# Export all functions from profiles
from .profiles import (
    _profile_reset,
    profile_list,
    profile_save,
    profile_minimal,
    profile_backend,
    init_detect,
    init_minimal,
    init_profile,
    init_status,
    init_reset,
    init_resume,
    init_wizard,
    show_status,
)

__all__ = [
    # Constants
    "BLUE",
    "GREEN",
    "YELLOW",
    "RED",
    "NC",
    "yaml",
    "FrontMatterToken",
    # Dataclasses
    "AgentGraphNode",
    "ScenarioMetadata",
    # Base functions
    "_color",
    "_resolve_claude_dir",
    "_resolve_init_dirs",
    "_init_slug_for_path",
    "_strip_ansi_codes",
    "_run_detection_command",
    "_run_detect_project_type",
    "_run_analyze_project",
    "_is_disabled",
    "_iter_md_files",
    "_iter_all_files",
    "_parse_active_entries",
    "_update_with_backup",
    "_uncomment_rule_line",
    "_comment_rule_line",
    "_remove_exact_entries",
    "_extract_front_matter",
    "_tokenize_front_matter",
    "_strip_inline_comment",
    "_clean_scalar",
    "_parse_inline_list",
    "_find_key",
    "_locate_path",
    "_collect_list_items",
    "_extract_values_for_path",
    "_extract_values_from_paths",
    "_extract_scalar_from_paths",
    "_backup_config",
    "_render_section",
    "_refresh_claude_md",
    "_load_yaml",
    "_load_yaml_dict",
    "_flatten_mixed",
    "_ensure_list",
    "_now_iso",
    "_load_detection_file",
    "_resolve_init_target",
    "_prompt_user",
    "_confirm",
    "_format_detection_summary",
    "_format_header",
    "_parse_selection",
    "_append_session_log",
    "_list_available_agents",
    "_list_available_modes",
    # Agent functions
    "_agent_basename",
    "_normalize_agent_filename",
    "_find_disabled_agent_file",
    "_find_agent_file_any_state",
    "_normalize_dependency_name",
    "_parse_agent_dependencies",
    "_read_agent_front_matter_lines",
    "_parse_agent_metadata_name",
    "_parse_dependencies_from_front",
    "_display_agent_name",
    "_extract_agent_name",
    "_generate_dependency_map",
    "_active_agent_files",
    "_find_agent_dependents",
    "build_agent_graph",
    "_format_dependency_entries",
    "render_agent_graph",
    "export_agent_graph",
    "agent_graph",
    "_iter_agent_paths",
    "_resolve_agent_validation_target",
    "_load_agent_schema",
    "agent_validate",
    "_agent_activate_recursive",
    "agent_activate",
    "agent_deactivate",
    "list_agents",
    "agent_status",
    "agent_deps",
    # Skill functions
    "list_skills",
    "skill_info",
    "skill_versions",
    "skill_validate",
    "skill_analyze",
    "skill_deps",
    "skill_agents",
    "skill_suggest",
    "skill_metrics",
    "skill_metrics_reset",
    "skill_analytics",
    "skill_report",
    "skill_trending",
    "skill_compose",
    "skill_community_list",
    "skill_community_install",
    "skill_community_validate",
    "skill_community_rate",
    "skill_community_search",
    # Mode functions
    "_mode_active_file",
    "_mode_inactive_dir",
    "mode_activate",
    "mode_deactivate",
    "list_modes",
    "mode_status",
    # Rule functions
    "rules_status",
    "rules_activate",
    "rules_deactivate",
    "list_rules",
    # Workflow functions
    "workflow_run",
    "workflow_list",
    "workflow_status",
    "workflow_resume",
    # Scenario functions
    "_scenario_dirs",
    "_ensure_scenarios_dir",
    "_scenario_schema_path",
    "_scenario_lock_basename",
    "_scenario_init_state",
    "_scenario_update_phase_state",
    "_scenario_finalize_state",
    "_collect_scenario_targets",
    "_parse_scenario_metadata",
    "scenario_list",
    "scenario_validate",
    "scenario_status",
    "scenario_stop",
    "scenario_run",
    "scenario_preview",
    # Profile and init functions
    "_profile_reset",
    "profile_list",
    "profile_save",
    "profile_minimal",
    "profile_backend",
    "init_detect",
    "init_minimal",
    "init_profile",
    "init_status",
    "init_reset",
    "init_resume",
    "init_wizard",
    "show_status",
]
